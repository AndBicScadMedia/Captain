#!/bin/env bash
#  Author: Mirko van der Waal
#  Mail: <mvdw at airmail dot cc>
#  Distributed under terms of the GNU2 license.
#
#  The MIT License (MIT)
#
#  Copyright (c) 2015 A[muse]ment
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

# Obviously we set -e to quit at any error.
set -e

# Change the current directory to the captain directory always. This would cause
# problems when the script is not ran from the captain directory.
cd $(dirname $0)

# Create the log file, and bind it to a file descriptor.
if [[ ! -d ~/.config/captain ]]; then
    mkdir -p ~/.config/captain
fi && exec 3<> ~/.config/captain/captain.log

# The only bit of python in the code, we parse .dosini file with it.
source <(python3 -c "
import sys, re, configparser
c = configparser.ConfigParser()
c.read(sys.argv[1])
for section in c:
    for key in c[section]:
        current = re.sub('[\n ]', '$', c[section][key]).split('$')
        key = key.replace('-', '_')
        if len(current) == 1:
            print(\"{}_{}={}\".format(section, key, current[0]))
        else:
            print(\"{}_{}=({})\".format(section, key, \" \".join(current)))
" captainrc 2>&3) 2>&3

export process=/tmp/captain-process
export unique=/tmp/captain-stack

# Always clean up when you are done.
trap "rm -f $unique $process; trap - TERM; kill 0" INT ERR TERM QUIT

# Does this need revision? No.
stack() {
    {
    # Retrieve a value from the stack.
    IFS=":" read -a char < <(grep -e "$1" < <(cat $unique))
    sed -i "/$1:/d" $unique
    echo "${char[0]}:${char[1]:1:$((${#char[1]} + 1))}" >> $unique
    echo ${char[1]:0:1}
    } 2>&3
}

# Does this need revision? No.
handle() {
    {
    # Catch strings from stdout and execute the matching commands.
    while read -r line; do
        local cmd=${handle[$line]}
        if [[ ! -z $cmd ]]; then
            echo "$cmd &"
        fi
    done
    } 2>&3
}

# Does this need revision? No.
format() {
    {
    # Dynamically format all the available options and display them accordingly.
    position=$(sed 's/:/ /g;s/|/%{c}/;s/|/%{r}/' <<< $bar_position)
    for script in captain.d/*; do
        position=$(sed "s/$(basename $script)/\$__$(basename $script)/g" <<< $position)
        switch="$switch $(basename $script)) __$(basename $script)=\${line#*@} ;;"
    done
    while read -r line; do
        eval "case ${line%%@*} in
            $switch
        esac"
        eval "echo \"$position\""
    done
    } 2>&3
}

manual() {
    # Manual mode hype ;)
    :
}

# Does this need revision? No.
{
    # Bar related things.
    declare -A bar
    window=(bspwm)
    bar=([background]="#FFFFFFFF"
         [background]="#FF000000"
         [position]="||"
         [offset]=0
         [height]=20
         [fonts]="monospace-9"
         [dock]="top")
    for section in "${!bar[@]}"; do
        if [[ $(eval "echo \${#bar_${section}}") -eq 0 ]]; then
            echo "Main: No value for 'bar-$section' -> using ${bar[${section}]}"
            eval "bar_${section}=${bar[${section}]}"
        fi
        case $section in
            offset) eval "bar_${section}=\"-o $bar_offset\"" ;;
            fonts) eval "bar_${section}=\"$(printf " -f %s" "${bar_fonts[@]}")\"" ;;
            dock) eval "bar_${section}=\"-${bar_dock//[^b]/}\"" ;;
        esac
    done
    for section in captain.d/*; do
        printf "%s" "$(basename $section):" {A..E} $'\n' >> $unique
    done
    for manager in ${window[@]}; do
        if [[ ! -z `pgrep $manager` ]]; then
            case $manager in
                bspwm) bspc config top_padding $bar_height ;;
            esac && break
        fi
    done
} 2>&2

# Does this need revision? No.
{
    # Whenever a value is not defined, set the default value for it.
    declare -A choices
    choices=([foreground]="#FFFFFFFF"
             [background]="#FF000000"
             [overline]=false
             [display]=false
             [manual]=false
             [reload]=5)
    for file in captain.d/*; do
        name=$(basename $file)
        for section in "${!choices[@]}"; do
            if [[ $(eval "echo \${#${name}_${section}}") -eq 0 ]]; then
                echo "Main: No value for '${name}-$section' -> using ${choices[${section}]}"
                eval "${name}_${section}=${choices[${section}]}"
            fi
        done
    done
} 2>&3

# Does this need revision? Likely.
{
    # Define what lines to draw, and what color they should be.
    declare -A line
    for file in captain.d/*; do
        name=$(basename $file)
        if [[ $(eval "echo \${#${name}_line}") -eq 0 ]]; then
            echo "Main: No value for '${name}-line' -> using ${choices[foreground]}"
            eval "${name}_line=${choices[foreground]}"
        fi
        line["${name}"]="%{"
        for section in underline overline; do
            if [[ $(eval "echo \${${name}_${section}}") = true ]]; then
                line["${name}"]+="+${section:0:1}"
            else
                echo "Main: No value for '${name}-${section}' -> using false"
            fi
        done
        line["${name}"]+="U$(eval "echo \${${name}_line}")}"
    done
} 2>&2

# Does this need revision? Yes.
{
    # Create event handles and embed them in areas.
    declare -A handle area events
    events=([mouse_middle]=2
            [scroll_down]=5
            [mouse_right]=3
            [mouse_left]=1
            [scroll_up]=4)
    for file in captain.d/*; do
        name=$(basename $file)
        for event in ${!events[@]}; do
            if [[ ! -z $(eval "echo \${${name}_${event}}") ]]; then
                uid="$(stack ${name})${name}"
                handle["${uid}"]="$(eval "echo \${${name}_${event}}")"
                area["${name}_p"]+="%{A${events[$event]}:${uid}:}"
                area["${name}_s"]+="%{A}"
            else
                echo "Main: No events specified for '${name}-${event/_/-}' -> using none."
            fi
        done
    done
} 2>&3

# Does this need revision? No.
{
    # Parse our previously collected elements to a full string.
    if [[ -e $process ]]; then
        rm $process
    fi && mkfifo "$process"
    for file in captain.d/*; do
        name=$(basename $file)
        if [[ $(eval "echo \${${name}_display}") = true ]]; then
            while :; do
                printf "%s" \
                    "${name}@" \
                    "$(eval "echo \${area[${name}_p]"})" \
                    "$(eval "echo \${line[${name}]"})" \
                    "%{F$(eval "echo \${${name}_foreground}")}" \
                    "%{B$(eval "echo \${${name}_background"})}" \
                    "$(tr '\n' ' ' < <(bash < "$file"))" \
                    "%{F-}%{B-}" \
                    "$(eval "echo \${area[${name}_s]"})" \
                    "%{-o}%{-uU-}" \
                    $'\n'
                sleep $(eval "echo \${${name}_reload"})
            done > "$process" &
        else
            echo "Main: ${name} is set not to display."
        fi
    done
} 2>&2

cat "$process" | format | lemonbar $bar_dock $bar_offset $bar_fonts -g x$bar_height -F "$bar_foreground" -B "$bar_background" | handle | sh
wait
