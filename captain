#!/bin/env bash
#  Author: Mirko van der Waal
#  Mail: <mvdw at airmail dot cc>
#  Distributed under terms of the GNU2 license.
#
#  Copyright (C) 2015
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, see <http://www.gnu.org/licenses/>.
#
#  A dynamic lemonbar script written almost entirely in bash.

set -e

# Create the location of the log file and create the file descriptor.

if [[ ! -d ~/.config/captain ]]; then
    mkdir -p ~/.config/captain
fi
exec 3<> ~/.config/captain/captain.log

# Assign the location of our pipe files.

export process=/tmp/captain-process
export unique=/tmp/captain-stack

# Clean up the /tmp files used for the script when we're done.

trap "rm -f $unique $process; trap - TERM; kill 0" INT ERR TERM QUIT EXIT

# You might be thinking. What the fuck is wrong with this dude. Why the fuck
# would he ever fucking do this. What the fuck. Well, why not right?
# Thanks to https://github.com/csvoss for making this possible.

source <(python3 -c "(lambda __print, __g, __y: [[(lambda __after: ([] for [] in [])
.throw(ImportError('You are not using version 3.x.x')) if (sys.hexversion <
50331648) else __after())(lambda: (lambda __after: ([] for [] in [])
.throw(TypeError('You need to specify the file to extract from.')) if
(len(sys.argv) <= 1) else __after())(lambda: (lambda __mod: [[(config.read(
sys.argv[1]), (lambda __items, __after, __sentinel: __y(lambda __this:
lambda: (lambda __i: [(lambda __items, __after, __sentinel: __y(lambda
__this: lambda: (lambda __i: [[(lambda __after: (__print('{}_{}={}'.format(
section, key, current[0])), __after())[1] if (len(current) == 1) else (
__print('{}_{}=({})'.format(section, key, ' '.join(current))), __after())
[1])(lambda: __this()) for __g['current'] in [(re.sub('[\n ]', '::', config
[section][key]).split('::'))]][0] for __g['key'] in [(__i)]][0] if __i is
not __sentinel else __after())(next(__items, __sentinel)))())(iter(config
[section]), lambda: __this(), []) for __g['section'] in [(__i)]][0] if __i
is not __sentinel else __after())(next(__items, __sentinel)))())(iter(config),
lambda: None, []))[1] for __g['config'] in [(ConfigParser())]][0] for
__g['ConfigParser'] in [(__mod.ConfigParser)]][0])(__import__('configparser',
__g, __g, ('ConfigParser',), 0)))) for __g['sys'] in [(__import__('sys',
__g, __g))]][0] for __g['re'] in [(__import__('re', __g, __g))]][0])(
__import__('builtins').__dict__['print'], globals(), (lambda f: (lambda x: x(x))(
lambda y: f(lambda: y(y)()))))" captainrc 2>&3) 2>&3

# Does this need revision? Yes.
stack() {
    # Manage various stacks of unique characters which are to be attached later.
    {
        if [[ ${#@} -ge 1 ]]; then
            case $1 in
                construct)
                    for section in captain.d/*; do
                        printf "%s" "$(basename $section):" {A..E} $'\n' >> $unique
                    done
                    ;;
                retrieve)
                    IFS=":"
                    stack_t=($(grep -e "$2:" < <(cat $unique)))
                    sed -i "/$2:/d" $unique
                    echo ${stack_t[1]:0:1}
                    echo "${stack_t[0]}:${stack_t[1]:1:$((${#stack_t[1]} + 1))}" >> $unique
                    ;;
                *)
                    echo "Stack: Invalid argument."
                    exit 0
                    ;;
            esac
        else
            echo "Stack: You did not specify enough arguments."
            exit 0
        fi
    } 2>&3
} && export -f stack

stack construct

# Does this need revision? No.
handle() {
    {
    # Catch string from stdout and execute the matching commands.
    while read -r line; do
        local cmd=${handle[$line]}
        if [[ ! -z $cmd ]]; then
            echo "$cmd &"
        fi
    done
    } 2>&3
}

# Does this need revision? Likely.
format() {
    {
    # Dynamically format all the available options and display them accordingly.
    position=$(sed 's/|/%{r}/' <(sed 's/|/%{c}/' <<< $bar_position))
    position=$(sed 's/:/ /g' <<< $position)
    for script in captain.d/*; do
        position=$(sed "s/$(basename $script)/\$__$(basename $script)/g" <<< $position)
        switch="$switch
        $(basename $script)) __$(basename $script)=\${line#*@} ;;"
    done
    echo $switch
    while read -r line; do
        eval "case ${line%%@*} in
            $switch
        esac"
        eval "echo \"$position\""
    done
    } 2>&3
}

# Does this need revision? No.
{
    # Set the a default choice for every variable that is not defined.
    declare -A choice
    choice=([foreground]="#FFFFFFFF"
            [background]="#FF000000"
            [display]=false
            [reload]=5)
    for file in captain.d/*; do
        name=$(basename $file)
        for section in "${!choice[@]}"; do
            if [[ $(eval "echo \${#${name}_${section}}") -eq 0 ]]; then
                echo "Main: No value for '${name}-$section' -> using ${choice[${section}]}"
                eval "${name}_${section}=${choice[${section}]}"
            fi
        done
    done
} 2>&3

# Does this need revision? Likely.
{
    # Create 'event' handles that embedded when parsing the output string. It
    # also saves the matching command to an array which we can later use to
    # activate run the event.
    declare -A handle area
    for file in captain.d/*; do
        name=$(basename $file)
        if [[ $(eval "echo \${#${name}_events[@]}") -gt 0 ]]; then
            for event in "$(eval "echo \${${name}_events[@]}")"; do
                IFS=':' read -a event <<< "$event"
                uid="$(stack retrieve ${name})${name}"
                eval "area[${name}_p]='${area[${name}_p]}${event_p}%{A${event[0]}:${uid}:}'"
                eval "area[${name}_s]='${area[${name}_s]}%{A}'"
                eval "handle[${uid}]=\"${event[1]}\""
            done
        else
            echo "Main: No events specified for '${name}' -> using none."
        fi
    done
} 2>&3

# Does this need revision? Likely.
{
    # Correctly set the fonts so we can apply them with xargs.
    bar_fonts=$(printf " -f %s" ${bar_fonts[@]})
} 2>&3

# Does this need revision? Likely.
{
    # Set offset for specific window managers.
    if [[ ! -z `pgrep bspwm` ]]; then
        bspc config top_padding $bar_height
    fi
} 2>&3

# Does this need revision? Likely.
{
    # Parse our previously collected elements to a full string.
    if [[ -e $process ]]; then
        rm $process
    fi
    mkfifo "$process"
    for file in captain.d/*; do
        name=$(basename $file)
        if [[ $(eval "echo \${${name}_display}") = true ]]; then
            uid=$(stack retrieve)
            while :; do
                printf "%s" \
                    "${name}@" \
                    "$(eval "echo \${area[${name}_p]"})" \
                    "%{F$(eval "echo \${${name}_foreground}")}" \
                    "%{B$(eval "echo \${${name}_background"})}" \
                    "$(tr '\n' ' ' < <(bash < "$file"))" \
                    "%{F-}%{B-}" \
                    "$(eval "echo \${area[${name}_s]"})" \
                    $'\n'
                sleep $(eval "echo \${${name}_reload"})
            done > "$process" &
        else
            echo "Main: ${name} is set not to display."
        fi
    done
    echo
} 2>&3

cat "$process" | format | lemonbar $bar_fonts -g x$bar_height -F "$bar_foreground" -B "$bar_background" | handle | sh
wait
